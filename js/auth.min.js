// Pega parâmetros da URL
const params = Object.fromEntries(new URLSearchParams(window.location.search).entries());

// Função principal de autorização
function handleAuthorization(authResponse) {
    localStorage.setItem('preferred_language', authResponse.preferred_language.toLowerCase());

    // Descobre o token correto a partir do loginid autorizado
    const loginid = authResponse.loginid;
    const tokenKey = Object.keys(params).find(k => params[k] === loginid && k.startsWith('acct'));
    let activeToken = '';

    if (tokenKey) {
        const index = tokenKey.replace('acct', '');
        activeToken = params[`token${index}`];
    }

    // Salva nos storages
    localStorage.setItem('activeToken', activeToken);
    localStorage.setItem('active_loginid', loginid);
    localStorage.setItem('tokenList', JSON.stringify(createTokenList(params, authResponse)));

    redirectToBot();
}

// Monta lista de tokens para o storage
function createTokenList(tokenParams, authResponse) {
    return authResponse.account_list
        .map((account, index) => {
            const idx = index + 1;
            return {
                accountName: tokenParams[`acct${idx}`],
                token: tokenParams[`token${idx}`],
                hasRealityCheck: false,
                hasTradeLimitation: false,
                loginInfo: account,
                lang: tokenParams[`lang${idx}`] || tokenParams.lang || 'en'
            };
        })
        .filter(account => account.accountName);
}

// Redireciona para o bot
function redirectToBot() {
    window.location.href = '/bot.html';
}

// Inicia autorização no WebSocket
function initAuth() {
    const ws = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id=1089');

    ws.onopen = () => {
        // Autoriza com o primeiro token só para descobrir loginid
        const firstToken = params.token1;
        if (!firstToken) {
            console.error('Nenhum token encontrado nos parâmetros.');
            return;
        }
        ws.send(JSON.stringify({ authorize: firstToken }));
    };

    ws.onmessage = (msg) => {
        const data = JSON.parse(msg.data);
        if (data.msg_type === 'authorize') {
            handleAuthorization(data.authorize);
            ws.close();
        }
        if (data.error) {
            console.error('Erro na autorização:', data.error);
            ws.close();
        }
    };
}

// Executa
initAuth();
