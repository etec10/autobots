const appId = document.querySelector('meta[property=appId]').content;
const urlParams = new URLSearchParams(window.location.search);
const loginRedirect = localStorage.getItem('loginredirect') ?? '';

if(loginRedirect.includes("/dbot"))
window.location.href = location.href.replace('/auth','/dbot')
if(loginRedirect.includes("/trading"))
window.location.href = location.href.replace('/auth','/trading/auth')
if(loginRedirect.includes("/dtrader"))
window.location.href = location.href.replace('/auth','/dtrader')

const params = {};
urlParams.forEach((value, key) => {
    if (key !== 'lang') params[key] = value;
});

const websocketUrl = `wss://ws.derivws.com/websockets/v3?app_id=${appId}`;
let websocket = null;
let reconnectTimeout = null;

// Conectar ao WebSocket
function connectWebSocket() {
    websocket = new WebSocket(websocketUrl);

    websocket.onopen = () => {
        console.log('WebSocket connection established');
        websocket.send(JSON.stringify({ authorize: params.token1 }));
    };

    websocket.onmessage = (message) => {
        const messageData = JSON.parse(message.data);
        handleWebSocketMessage(messageData);
    };

    websocket.onclose = () => handleWebSocketClose();
    websocket.onerror = () => handleWebSocketError();
}

// Função para lidar com mensagens do WebSocket
function handleWebSocketMessage(messageData) {
    if (messageData.msg_type === 'authorize') {
        if (messageData.authorize) {
            handleAuthorization(messageData.authorize);
        } else if (messageData.error) {
            alert(messageData.error.message);
            redirectToBot();
        }
    }
}

// Função para lidar com a resposta de autorização
function handleAuthorization(authResponse) {
    localStorage.setItem('preferred_language', authResponse.preferred_language.toLowerCase());

    const accountIndex = Math.ceil(Object.keys(params).length / 3);
    const activeToken = params[`acct${accountIndex}`]?.includes("VRT") ? params[`token${accountIndex}`] : params.token1;
    const activeLoginid = params[`acct${accountIndex}`]?.includes("VRT") ? params[`acct${accountIndex}`] : params.acct1;
    localStorage.setItem('activeToken', activeToken);
    localStorage.setItem('active_loginid',activeLoginid);
    const transformedAccounts = {};

    localStorage.setItem('tokenList', JSON.stringify(createTokenList(params, authResponse)));
    

    redirectToBot()
}

// Função para criar lista de tokens
function createTokenList(tokenParams, authResponse) {
    return authResponse.account_list
        .map((account, index) => ({
            accountName: tokenParams[`acct${index + 1}`],
            token: tokenParams[`token${index + 1}`],
            hasRealityCheck: false,
            hasTradeLimitation: false,
            loginInfo: index === 0 ? authResponse : account,
            lang: tokenParams[`lang${index + 1}`]
        }))
        .filter(account => account.accountName); // Filtrar apenas contas com nomes válidos
}

// Lidar com fechamento do WebSocket
function handleWebSocketClose() {
    console.log('WebSocket connection closed');
    reconnectWebSocket();
}

// Lidar com erro do WebSocket
function handleWebSocketError() {
    console.log('WebSocket connection error');
    reconnectWebSocket();
}

// Função para reconectar ao WebSocket
function reconnectWebSocket() {
    if (!reconnectTimeout) {
        reconnectTimeout = setTimeout(() => {
            console.log('Trying to reconnect WebSocket...');
            connectWebSocket();
            reconnectTimeout = null;
        }, 5000);
    }
}

// Função para redirecionar para o bot
function redirectToBot() {
    
    window.location.href = loginRedirect ? loginRedirect : '/bot';
}

connectWebSocket();
setTimeout(() => location.reload(), 6000);
